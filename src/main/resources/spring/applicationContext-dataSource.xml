<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Properties place holder support -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties" />
	</bean>

	<!-- Use the tomcat connection pool（better than dbcp） -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- Init size -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- max size -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- max idle size -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- min idle size -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- max wait time -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- Integrate MyBatis into Spring，dispense with configuration files for MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- scan "mapping.xml" files automatically-->
		<property name="mapperLocations" value="classpath:mybatis-mapper-locations/**/*.xml"></property>
	</bean>

	<!-- BeanDefinitionRegistryPostProcessor that searches recursively starting from a base package for
 		interfaces and registers them as MapperFactoryBean. Note that only interfaces with at
		least one method will be registered; concrete classes will be ignored -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- Packages for DAO interfaces，Spring will scan them automatically --> 
		<property name="basePackage" value="mytld.mycompany.myapp.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>

	<!-- Transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction support, register transaction bean definitions(e.g TransactionAttributeSource, 
		TransactionInterceptor, TransactionAttributeSourceAdvisor, AUTO_PROXY_CREATOR_BEAN_NAME) for role of INFRASTRUCTURE -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- scan mybatis-spring class automatically -->
	<!-- mybatis-spring:scan base-package="" /> -->
</beans>
